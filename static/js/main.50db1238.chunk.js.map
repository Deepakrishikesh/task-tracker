{"version":3,"sources":["components/Header.js","components/Button.js","components/AddTask.js","components/Tasks.js","components/theme-mode.png","App.js","reportWebVitals.js","index.js"],"names":["Header","title","defaultProps","Button","styles","text","onClick","style","className","backgroundColor","fontSize","AddTask","onAdd","isDark","useState","setText","marginBottom","onSubmit","e","preventDefault","replace","length","alert","type","placeholder","value","onChange","target","position","Tasks","tasks","onDelete","clearAll","toggle","doubleTap","useDoubleTap","map","task","onDoubleClick","id","isMobile","complete","marginTop","display","justifyContent","bottom","right","borderRadius","padding","App","darkTheme","window","matchMedia","setTasks","matches","setDark","width","innerWidth","windowSize","setWindowSize","LOCAL_STORAGE_TASKS","LOCAL_STORAGE_THEME","useEffect","handleResize","addEventListener","_","removeEventListener","theme","JSON","parse","localStorage","getItem","setItem","stringify","storedTasks","checked","size","speed","src","dark_btn","alt","taskText","newTask","filter","confirm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50db1238.chunk.js","sourcesContent":["import React from 'react';\n//import Button from './Button';\n const Header = ({title}) => {\n     return (\n         <>\n         <header>\n            <h1>{title}</h1>\n         </header>\n         </>\n     )\n }\n Header.defaultProps={\n     title:'Task Manager'\n }\n export default Header\n","import React from 'react'\n\nconst Button = ({styles,text,onClick}) => {\n    /*const onClick= () => {\n        alert(text,'clicked');\n    }*/\n    return (\n        <>\n            <button \n                style={styles} \n                className='btn'\n                onClick={onClick}> {text} \n            </button>\n        </>\n    )\n}\nButton.defaultProps={\n    styles:{\n        backgroundColor: 'black',\n        fontSize: '80%'\n    },\n    text: 'Button'\n    \n}\nexport default Button\n","import React,{useState} from 'react'\nimport Button from './Button';\nconst AddTask = ({onAdd, isDark}) => {\n    const style ={\n        position: 'relative',\n        //top:'0',\n        //right:'0',\n        backgroundColor: 'black',\n        fontSize: 'medium'\n    }\n    const [text, setText] = useState('')\n\n    const onSubmit = (e) =>{\n        //console.log(e.value);\n        e.preventDefault()\n        if(!text || !text.replace(/\\s/g, '').length){\n            alert('Please add task')\n            setText('')\n            return\n        }\n        onAdd({text})\n        setText('')\n    }\n    return (\n        <form style={{ marginBottom:'5%'}} onSubmit={onSubmit}>\n            <input \n                className={`${isDark?'dark-mode':null}`}\n                type='text' \n                placeholder='Add Task'\n                value={text} \n                onChange={(e) => setText(e.target.value)}/>\n            <Button\n                styles={style} \n                text='Add' />\n        </form>\n    )\n}\n\nexport default AddTask\n","// import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { FaTimes } from 'react-icons/fa';\nimport { useDoubleTap } from 'use-double-tap';\nimport Button from './Button';\nimport AddTask from './AddTask';\nimport React from 'react';\nconst Tasks = ({tasks, onDelete, onAdd, clearAll, toggle,isDark}) => {\n    const style ={\n        position:'absolute',\n        bottom:'10px',\n        right:'10px',\n        backgroundColor: 'rgb(230,25,0)',\n        borderRadius: '20px',\n        padding: '15px'\n    }\n    // const [currentTask,setCurrentTask]=useState({})\n    const doubleTap = useDoubleTap(() => {\n        //toggle(this.id);\n        alert('This operation is not yet complete. Stay tuned.')\n      } , 300)\n    return (\n        <div className=\"tasks\">\n            <AddTask isDark={isDark} onAdd={onAdd}/>\n                {tasks.length>0 ?\n                    <div>\n                    {tasks.map((task)=>(\n                        <div key={task.id} \n                            className='center' \n                            onDoubleClick={()=>toggle(task.id)}\n                            {...isMobile ? {...doubleTap} : null}\n                            >\n                            <h3 \n                                className={`${task.complete ? 'strike' : null}`} >\n                                    {task.text}\n                            </h3> \n                            <FaTimes \n                                        className='delbtn'\n                                        onClick={()=>onDelete(task.id)} \n                            />\n                        </div>\n            ))}\n            </div>\n            :\n                       <div style={{marginTop:'30px'}}> <p style={{display:'flex', justifyContent:'center'}}>No Tasks</p> </div>\n\n            }\n            <div style={{marginBottom:'70px'}} />\n            { tasks.length>0 ? <Button onClick={clearAll} text='Clear All' className='delbtn' styles={style} /> :null}\n        </div>\n    )\n}\n\nexport default Tasks","export default __webpack_public_path__ + \"static/media/theme-mode.511605fd.png\";","import { useState, useEffect } from \"react\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\n//import Responsive from 'react-responsive-decorator';\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport dark_btn from \"./components/theme-mode.png\"\nimport './App.css';\nfunction App() {\n  //const name='Deepak'\n  //const x=true\n  //detect theme\n  const darkTheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const [tasks,setTasks] = useState([])\n  const [isDark, setDark] = useState(darkTheme.matches)\n  const [windowSize,setWindowSize] = useState({width:window.innerWidth})\n  const LOCAL_STORAGE_TASKS='task_manager.tasks'\n  const LOCAL_STORAGE_THEME='task_manager.theme'\n  //To handle screen resize\n  useEffect(()=>{\n    const handleResize=()=>{\n      setWindowSize({width:window.innerWidth})\n    }\n    window.addEventListener('resize',handleResize)\n    return _ => {\n      window.removeEventListener('resize', handleResize)\n    }\n  },[])\n\n  //get theme preference from local storage\n  useEffect(()=>{\n    const theme = JSON.parse(localStorage.getItem(LOCAL_STORAGE_THEME))\n    if(theme!==null)\n      setDark(theme)\n  },[])\n\n  //store theme preference in local storage\n  useEffect(()=>{\n    localStorage.setItem(LOCAL_STORAGE_THEME,JSON.stringify(isDark))\n  },[isDark])\n\n  //get from local storage\n  useEffect(()=>{\n    //console.log('get task')\n    const storedTasks = JSON.parse(localStorage.getItem(LOCAL_STORAGE_TASKS))\n    if(storedTasks)\n      setTasks(storedTasks)\n  },[])\n\n  //add to local storage\n  useEffect(()=>{\n    //console.log('store task')\n    localStorage.setItem(LOCAL_STORAGE_TASKS,JSON.stringify(tasks))\n  },[tasks])\n\n  //add task\n  const addTask = (taskText) =>{\n    //console.log(task)\n    //console.log(tasks[tasks.length - 1].id)\n    //console.log(taskText.text)\n    const id = tasks.length>0 ? tasks[tasks.length - 1].id+1 : 1\n    const complete = false\n    const text = taskText.text;\n    //console.log(id)\n    const newTask = {id, text, complete}\n    setTasks([...tasks,newTask])\n  }\n\n  //delete task\n  const deleteTask = (id) =>{\n    setTasks(tasks.filter((task)=> task.id !== id))\n  }\n\n  //clear all task\n  const clearTask=()=>{\n    //console.log('inside clear all')\n    //const confirm = window.confirm(\"This will delete all your tasks\")\n    if(window.confirm(\"This will delete all your tasks\"))\n      setTasks([])\n  }\n  //toggle task\n  const toggleTask = (id) =>{\n    setTasks(tasks.map((task) => \n      task.id === id ? {...task, complete: !task.complete} : task\n    ))\n  }\n \n  // change theme\n  return (\n    <div className={`${isDark?'dark-mode cover': null}`}>\n      <Header />\n      \n      {windowSize.width>535 ? <DarkModeToggle \n        className='topright' \n        checked={isDark}\n        size='70px'\n        speed={2}\n        onChange={()=> setDark(!isDark)} /> \n        : \n        <img src={dark_btn}\n          alt='' \n          className='rightBottom'\n          onClick={()=> setDark(!isDark)} />\n      }\n      \n      <Tasks \n        isDark={isDark}\n        onAdd={addTask}\n        onDelete={deleteTask}\n        clearAll={clearTask} \n        toggle={toggleTask} \n        tasks={tasks}/>\n          \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}